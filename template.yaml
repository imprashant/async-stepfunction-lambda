AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  async-stepfunction-lambda

  Sample SAM Template for async-stepfunction-lambda

Resources:
  AsyncStockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        StockCheckerFunctionArn: !GetAtt StockCheckerFunction.Arn
        StockSellerFunctionArn: !GetAtt StockSellerFunction.Arn
        StockBuyerFunctionArn: !GetAtt StockBuyerFunction.Arn
        OutputQueueUrl: !Ref OutputQueue
        BankTransactionInputQueueUrl: !Ref BankTransactionInputQueue
      Name: "AsyncStockTradingStateMachine"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StockCheckerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockSellerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockBuyerFunction
        - SQSSendMessagePolicy:
            QueueName: !GetAtt OutputQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BankTransactionInputQueue.QueueName
  
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      CodeUri: functions/trigger-lambda/
      FunctionName: TriggerFunction
      Environment:
        Variables:
          statemachine_arn: !GetAtt AsyncStockTradingStateMachine.Arn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InputQueue.Arn
            BatchSize: 1
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt AsyncStockTradingStateMachine.Name

  InputQueue:
    Type: AWS::SQS::Queue
    Properties: 
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InputDLQ.Arn
        maxReceiveCount: 3
  
  InputDLQ:
    Type: AWS::SQS::Queue
  
  OutputQueue:
    Type: AWS::SQS::Queue

  StockCheckerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/stock-checker/
      FunctionName: StockCheckerFunctionForAsyncFlow
      Handler: app.lambdaHandler
      Runtime: nodejs14.x

  StockSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock-seller/
      FunctionName: StockSellerFunctionForAsyncFlow
      Handler: app.lambdaHandler
      Runtime: nodejs14.x

  StockBuyerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock-buyer/
      FunctionName: StockBuyerFunctionForAsyncFlow
      Handler: app.lambdaHandler
      Runtime: nodejs14.x

  BankTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      CodeUri: functions/async-bank-transaction-handler
      FunctionName: BankTransactionFunction
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BankTransactionInputQueue.Arn
            BatchSize: 1
      Policies:
        - Statement:
          - Sid: StepfunctionSuccessFailurePolicy
            Effect: Allow
            Action:
            - states:SendTaskSuccess
            - states:SendTaskFailure
            Resource: '*'
  
  BankTransactionInputQueue:
    Type: AWS::SQS::Queue
    Properties: 
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BankTransactionInputDLQ.Arn
        maxReceiveCount: 3
  
  BankTransactionInputDLQ:
    Type: AWS::SQS::Queue

Outputs:
  # StockTradingStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  AsyncStockTradingStateMachineArn:
    Description: "Stock Trading state machine ARN"
    Value: !Ref AsyncStockTradingStateMachine
  AsyncStockTradingStateMachineRole:
    Description: "IAM Role created for Stock Trading state machine based on the specified SAM Policy Templates"
    Value: !GetAtt AsyncStockTradingStateMachine.Arn
